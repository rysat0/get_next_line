static ssize_t	fill_joined(int fd, char **joined, char *buf)//中身書き換えでなく、ポインタ指す先の書き換えなので**joined(ループ毎にmallocし直す)
{
	ssize_t	rb;//read_bytes

	rb = 1;//1初期化
	while (!newline_detect(*joined))//joinedに改行くるまで
	{
		rb = read(fd, buf, BUFFER_SIZE);
		if(rb <= 0)
			break;
		buf[rb] = '\0';
		if (*joined == NULL)//最初はdupで十分
			*joined = ft_strndup(buf, (size_t)rb);
		else//二回目ループ以降はjoin_free
			*joined = ft_strjoin_free(*joined, buf, rb);
		if (*joined == NULL)
			return (-2);//join_freeに失敗
	}
	return (rb);//エラー処理用にrbリターン
}

char	*get_next_line(int fd)
{
	static char	*joined;
	char		*buf;
	ssize_t		st;
	char		*line;

	if (fd < 0 || BUFFER_SIZE <= 0)//初期エラー
		return (NULL);
	buf = malloc(BUFFER_SIZE + 1);//巨大メモリサイズ対応動的確保
	if (buf == NULL)
		return (NULL);
	st = fill_joined(fd, &joined, buf);//'\n'が出るまでループ,joined自体のアドレス渡したいので&joined
	if (st == -2)
		return (free(buf), NULL);//strjoin_free失敗,確保したbufをfreeしてNULL
	if (st < 0)
		return (free(buf), free(joined), joined = NULL, NULL);//if (read_bytes < 0)と同じ,残り全部freeしてNULL
	if (joined == NULL || *joined == '\0')//ファイルを読み終わったとき
		return (free(buf), NULL);
	line = extract_line(joined);
	joined = make_next_joined(joined);
	return (free(buf), line);
}
